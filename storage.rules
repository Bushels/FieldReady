rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidDocumentType() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('text/.*') ||
             request.resource.contentType.matches('application/json');
    }
    
    function isReasonableSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                   isValidImageType() && 
                   request.resource.size < 2 * 1024 * 1024; // 2MB for profile images
    }
    
    // User combine photos and documentation
    match /users/{userId}/combines/{combineId}/{fileName} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isOwner(userId) && 
                   (isValidImageType() || isValidDocumentType()) &&
                   isReasonableSize();
    }
    
    // Public combine specification images (readable by all authenticated users)
    match /public/combines/{brand}/{model}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidImageType() && isReasonableSize();
    }
    
    // Maintenance logs and documentation
    match /users/{userId}/maintenance/{fileName} {
      allow read, write: if isOwner(userId) && 
                         isValidDocumentType() && 
                         isReasonableSize();
    }
    
    // Cached offline data (temporary storage)
    match /users/{userId}/cache/{fileName} {
      allow read, write: if isOwner(userId) && 
                         request.resource.size < 5 * 1024 * 1024; // 5MB cache limit
    }
    
    // System exports and backups (admin only)
    match /admin/exports/{fileName} {
      allow read, write: if isAdmin();
    }
    
    // User data exports (PIPEDA compliance)
    match /users/{userId}/exports/{fileName} {
      allow read: if isOwner(userId);
      allow write: if false; // Only system can generate exports
    }
    
    // Temporary file uploads (processing area)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
                         isReasonableSize() &&
                         request.time < timestamp.date(2025, 12, 31); // Temporary files expire
      allow delete: if isOwner(userId) || 
                    resource.timeCreated < timestamp.date(2025, 1, 1); // Auto-cleanup old temp files
    }
    
    // Research data (anonymized, admin managed)
    match /research/{category}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
